#!/usr/bin/env bash

BIN_NAME=$(basename "$0")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2


# command help

	sub_help() {
		echo "Usage: $BIN_NAME <command>"
		echo
		echo "Commands:"
		echo "-  files     Copies dotfiles (\${folder}/.*) to ~ if they don’t already exist"
		echo "-  install   Runs all installers (\${folder}/install)"
		echo "-  macOS     Apply macOS system defaults (requires reboot)"
		echo "-  dock      Empty dock on macOS"
		echo "-  help      This help message"
	}


# command: files

	copy_file() {
		if ! [ -e "$2" ]; then
			cp "$1" "$2"
			message success "copied $1 to $2"
		else
			message info "file $2 already exists"
		fi
	}

	link_file() {
		if [ -e "$2" ]; then
			if [ "$(readlink "$2")" = "$1" ]; then
				message success "skipped $1"
				return 0
			else
				mv "$2" "$2.backup"
				message success "moved $2 to $2.backup"
			fi
		fi
		ln -sf "$1" "$2"
		message success "linked $1 to $2"
	}

	sub_files() {

		message info "copying dotfiles (~/dotfiles/\${folder}/.*) to ~"

		for src in $(find -H "$DOTFILES" -mindepth 2 -maxdepth 2 -name '.*' ! -path '*/.git/*' ! -name '*.DS_Store'); do
			dest="$HOME/$(basename $src)"
			copy_file "$src" "$dest"
	  	done
	}


# command: install

	sub_install() {

		message info "running all installers (~/dotfiles/\${folder}/install)…"

		# Ask for the administrator password upfront
		sudo -v

		# Keep-alive: update existing `sudo` time stamp until we're finished
		while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

		# Run preinstallers
		for installer in $(find -H "$DOTFILES" -mindepth 2 -maxdepth 2 -name 'preinstall'); do
			bash $installer
	  	done

		# Run installers
		for installer in $(find -H "$DOTFILES" -mindepth 2 -maxdepth 2 -name 'install'); do
			bash $installer
	  	done

	  	# Run postinstallers
		for installer in $(find -H "$DOTFILES" -mindepth 2 -maxdepth 2 -name 'postinstall'); do
			bash $installer
	  	done
	}


# command: macOS

	sub_macOS() {
		bash $DOTFILES/macOS/macOS
	}


# command: dock

	sub_dock() {
		# Wipe all (default) app icons from the Dock
		defaults write com.apple.dock persistent-apps -array
	}


# run

	case $COMMAND_NAME in
		"" | "-h" | "--help")
	    	sub_help
	    	;;
	  	*)
			shift
			if typeset -f "sub_${COMMAND_NAME}" > /dev/null; then
				sub_${COMMAND_NAME} "$@"
			else
				message fail "command '$COMMAND_NAME' is not a known command. try '$BIN_NAME help'." >&2
			fi
	    	;;
	esac